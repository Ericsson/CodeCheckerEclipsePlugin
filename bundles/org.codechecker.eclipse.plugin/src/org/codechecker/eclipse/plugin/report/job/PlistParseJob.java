package org.codechecker.eclipse.plugin.report.job;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;

import org.codechecker.eclipse.plugin.Logger;
import org.codechecker.eclipse.plugin.config.CodeCheckerContext;
import org.codechecker.eclipse.plugin.report.PlistParser;
import org.codechecker.eclipse.plugin.report.SearchList;

/**
 * This {@link Job} manages the parsing of the CodeChecker Analysis results.
 * Should be scheduled when:
 *      - A project is opened.
 *      - A project is being built, after an {@link AnalyzeJob}.
 *
 */
public class PlistParseJob extends Job{

    private IProject project;
    
    /**
     * Hidden default ctor to avoid incorrect usage, project is always needed.
     * @param name NOT USED
     */
    private PlistParseJob(String name) {
        super(name);
    }

    /**
     * Use this ctor to create a PlistParseJob with a valid project.
     * @param project The project that's being processed.
     */
    public PlistParseJob(IProject project) {
        super("PlistParseJob");
        this.project = project;
    }

    @Override
    protected IStatus run(IProgressMonitor arg0) {
        Logger.log(IStatus.INFO, "Parsing analysis results.");
        parsePlistForProject(project);
        return Status.OK_STATUS;
    }
    
    /**
     * Method for parsing every plist result generated by the analyzer.
     * @param project the project that's results is needed to be parsed.
     */
    public void parsePlistForProject(final IProject project) {
        Logger.log(IStatus.INFO,
                "Started Plist Parsing for project: "+project.getName());
        final PlistParser parser = new PlistParser(project);
        SearchList sl;
        sl = parser.processResultsForProject();
        CodeCheckerContext.getInstance().setReportForProject(project, sl);
        Logger.log(IStatus.INFO,
                "Finished Plist Parsing for project: "+project.getName());
    }
}
